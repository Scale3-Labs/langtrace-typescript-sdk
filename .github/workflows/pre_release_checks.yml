name: Pre Release Checks
on:
  pull_request:
    types: [synchronize, opened, edited, reopened, unlocked, labeled]
    branches: [main, development]

concurrency: ${{ github.workflow }}-${{ github.ref }}

permissions:
  contents: write
  issues: write
  pull-requests: write
  repository-projects: write
  statuses: write
  actions: write

jobs:
  auto-label:
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.labels.*.name , 'release:true') == false
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: "npm"

      - name: Install Node.js dependencies
        run: npm ci

      - name: Labeler
        uses: actions/labeler@v5.0.0
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          configuration-path: .github/config/labeler.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  pre-release-checks:
    if: contains(github.event.pull_request.labels.*.name, 'release:true')
    runs-on: ubuntu-latest
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: "npm"

      - name: Install Node.js dependencies
        run: npm ci

      - name: Extract package version
        id: package-version
        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV

      - name: Update PR title with version
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          PACKAGE_VERSION="${{ env.PACKAGE_VERSION }}"
          RELEASE_PREFIX="Release $PACKAGE_VERSION - "

          # PR_TITLE="$(gh pr view "$PR_NUMBER" --json title -q .title)"
          echo "Current PR Title: $PR_TITLE"

          # Pattern to match "Release x.x.x -", where x.x.x is any version number
          pattern="Release [0-9]+\.[0-9]+\.[0-9]+ -"
          VERSION_PATTERN="Release $PACKAGE_VERSION -"

          # Use bash pattern matching to check if the version pattern exists in the string
          if [[ $PR_TITLE =~ $pattern ]]; then
              # Pattern found - replace it
              NEW_TITLE=$(echo "$PR_TITLE" | sed -E "s/$pattern/$VERSION_PATTERN/")
          else
              # Pattern not found - append the new string
              NEW_TITLE=" ${VERSION_PATTERN}${PR_TITLE}"
          fi
          gh pr edit "$PR_NUMBER" --title "$NEW_TITLE"

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          PACKAGE_VERSION: ${{ env.PACKAGE_VERSION }}

      - name: Check for Changeset file
        id: check
        run: |
          echo "Checking for Changeset files..."
          git fetch origin +${{ github.base_ref }}:${{ github.base_ref }}
          git fetch origin +${{ github.head_ref }}:${{ github.head_ref }}
          CHANGES_FOUND=$(git diff --name-only origin/${{ github.base_ref }}...${{ github.head_ref }} | grep '^\.changeset/' | wc -l)
          echo "Changeset files found: $CHANGES_FOUND"
          if [ "$CHANGES_FOUND" -eq "0" ]; then
            echo "No Changeset found for PR labeled with 'release:true'."
            echo "CHANGESET_PRESENT=false" >> $GITHUB_ENV
          else
            echo "Changeset found."
            echo "CHANGESET_PRESENT=true" >> $GITHUB_ENV
          fi

      - name: Fail if no Changeset is present
        if: env.CHANGESET_PRESENT == 'false'
        run: |
          echo "This PR is marked for release but does not contain a Changeset file."
          echo "Please add a Changeset file to indicate the changes being released."
          exit 1
        env:
          CHANGESET_PRESENT: ${{ env.CHANGESET_PRESENT }}
